(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{236:function(t,a,e){"use strict";e.r(a);var r=e(0),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"tcp三次握手与四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手与四次挥手","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP三次握手与四次挥手")]),t._v(" "),e("h3",{attrs:{id:"tcp的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp的特性","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP的特性")]),t._v(" "),e("ol",[e("li",[t._v("TCP 提供一种"),e("strong",[t._v("面向连接的")]),t._v("、"),e("strong",[t._v("可靠")]),t._v("的字节流服务")]),t._v(" "),e("li",[t._v("在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP")]),t._v(" "),e("li",[t._v("TCP 使用校验和，确认和重传机制来保证可靠传输")]),t._v(" "),e("li",[t._v("TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复")]),t._v(" "),e("li",[t._v("TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制")])]),t._v(" "),e("p",[t._v("注意：TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。")]),t._v(" "),e("h3",{attrs:{id:"三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三次握手","aria-hidden":"true"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),e("p",[t._v("三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/imgs/threeandfour/three.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手","aria-hidden":"true"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),e("p",[t._v("目的是与服务器断开连接")]),t._v(" "),e("p",[e("img",{attrs:{src:"/imgs/threeandfour/four.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"syn攻击"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syn攻击","aria-hidden":"true"}},[t._v("#")]),t._v(" SYN攻击")]),t._v(" "),e("h4",{attrs:{id:"什么是syn攻击-syn-flood"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是syn攻击-syn-flood","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是syn攻击(SYN Flood)?")]),t._v(" "),e("p",[t._v("在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.")]),t._v(" "),e("p",[t._v("SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。")]),t._v(" "),e("p",[t._v("SYN 攻击是一种典型的 DoS/DDoS 攻击。")]),t._v(" "),e("h4",{attrs:{id:"如何检测-syn-攻击？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何检测-syn-攻击？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何检测 SYN 攻击？")]),t._v(" "),e("p",[t._v("检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。")]),t._v(" "),e("h4",{attrs:{id:"如何防御-syn-攻击？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何防御-syn-攻击？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何防御 SYN 攻击？")]),t._v(" "),e("p",[t._v("SYN攻击不能完全被阻止，除非将TCP协议重新设计。我们所做的是尽可能的减轻SYN攻击的危害，常见的防御 SYN 攻击的方法有如下几种：")]),t._v(" "),e("ul",[e("li",[t._v("缩短超时（SYN Timeout）时间")]),t._v(" "),e("li",[t._v("增加最大半连接数")]),t._v(" "),e("li",[t._v("过滤网关防护")]),t._v(" "),e("li",[t._v("SYN cookies技术")])]),t._v(" "),e("h4",{attrs:{id:"tcp-keepalive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-keepalive","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP KeepAlive")]),t._v(" "),e("p",[t._v("TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些 TCP 连接并未来得及正常释放，在软件层面上，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用 TCP 的 KeepAlive 机制实现来实现。主流的操作系统基本都在内核里支持了这个特性。")]),t._v(" "),e("p",[t._v("TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。")]),t._v(" "),e("p",[t._v("TCP-Keepalive-HOWTO 有对 TCP KeepAlive 特性的详细介绍，有兴趣的同学可以参考。这里主要说一下，TCP KeepAlive 的局限。首先 TCP KeepAlive 监测的方式是发送一个 probe 包，会给网络带来额外的流量，另外 TCP KeepAlive 只能在内核层级监测连接的存活与否，而连接的存活不一定代表服务的可用。例如当一个服务器 CPU 进程服务器占用达到 100%，已经卡死不能响应请求了，此时 TCP KeepAlive 依然会认为连接是存活的。因此 TCP KeepAlive 对于应用层程序的价值是相对较小的。需要做连接保活的应用层程序，例如 QQ，往往会在应用层实现自己的心跳功能。")]),t._v(" "),e("h3",{attrs:{id:"拓展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拓展","aria-hidden":"true"}},[t._v("#")]),t._v(" 拓展")]),t._v(" "),e("p",[t._v("1.dns是什么\n和http一样是应用层协议，提供域名到ip地址之间的解析服务")]),t._v(" "),e("p",[t._v("2.IP协议是什么\n作用在于把各种数据包准确无误的传递给对方")]),t._v(" "),e("h4",{attrs:{id:"tcp-ip的分层："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip的分层：","aria-hidden":"true"}},[t._v("#")]),t._v(" tcp/ip的分层：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/imgs/threeandfour/tcp.png",alt:""}})]),t._v(" "),e("p",[t._v("应用层、传输层、网络层、数据链路层")]),t._v(" "),e("p",[t._v("链路层：包括操作系统中的设备驱动程序")]),t._v(" "),e("p",[t._v("网络层：是tcp/ip协议组的核心")]),t._v(" "),e("h4",{attrs:{id:"tcp与udp区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp与udp区别","aria-hidden":"true"}},[t._v("#")]),t._v(" tcp与udp区别")]),t._v(" "),e("p",[t._v("tcp 可靠 面向连接")]),t._v(" "),e("p",[t._v("udp 不可靠 无链接")]),t._v(" "),e("p",[t._v("在tcp中，如果有一方收到了对方的数据，一定会发送ack确认包给发送方，而在udp中没有这个过程，因此导致了tcp稳定，而udp不稳定")])])}),[],!1,null,null,null);a.default=v.exports}}]);