(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{255:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"递归与分治"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归与分治","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归与分治")]),t._v(" "),e("h2",{attrs:{id:"递归的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归的概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归的概念")]),t._v(" "),e("p",[t._v(" 由分治法产生的子问题往往是原问题的较小模 式，这就为使用递归技术提供了方便。在这种 情况下，反复应用分治手段，可以使子问题与 原问题类型一致而其规模却不断缩小，最终使 子问题缩小到很容易直接求出其解。这自然导 致递归过程的产生。")]),t._v(" "),e("blockquote",[e("p",[t._v("边界条件与递归方程是递归函数的二个要素")])])])}),[],!1,null,null,null);a.default=s.exports}}]);