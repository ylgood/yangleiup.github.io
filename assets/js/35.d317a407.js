(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{227:function(e,t,n){"use strict";n.r(t);var _=n(0),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"react-dom-diff"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-dom-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" react dom diff")]),e._v(" "),n("p",[e._v("传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。")]),e._v(" "),n("p",[e._v("diff 策略")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。")])]),e._v(" "),n("li",[n("p",[e._v("拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。")])]),e._v(" "),n("li",[n("p",[e._v("对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。")])])]),e._v(" "),n("p",[e._v("基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。")]),e._v(" "),n("ol",[n("li",[e._v("tree diff")])]),e._v(" "),n("p",[e._v("React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。")]),e._v(" "),n("p",[e._v("既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("component diff")])]),e._v(" "),n("p",[e._v("如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。")]),e._v(" "),n("p",[e._v("如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。")]),e._v(" "),n("p",[e._v("对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("element diff")])]),e._v(" "),n("p",[e._v("当节点处于同一层级时，React diff 提供了三种节点操作，分别为：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。")]),e._v(" "),n("p",[e._v("INSERT_MARKUP，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。")]),e._v(" "),n("p",[e._v("MOVE_EXISTING，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。")]),e._v(" "),n("p",[e._v("REMOVE_NODE，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。")]),e._v(" "),n("p",[e._v("总结")]),e._v(" "),n("p",[e._v("React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；")]),e._v(" "),n("p",[e._v("React 通过分层求异的策略，对 tree diff 进行算法优化；")]),e._v(" "),n("p",[e._v("React 通过相同类生成相似树形结构，不同类生成不同树形结构的策略，对 component diff 进行算法优化；")]),e._v(" "),n("p",[e._v("React 通过设置唯一 key的策略，对 element diff 进行算法优化；")]),e._v(" "),n("p",[e._v("建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；")]),e._v(" "),n("p",[e._v("建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/20346379",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文档"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5cb66fdaf265da0384128445",target:"_blank",rel:"noopener noreferrer"}},[e._v("讲的挺好的"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=v.exports}}]);